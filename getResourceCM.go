package main

import (
	"fmt"
	"gopkg.in/AlecAivazis/survey.v1"
	"log"
	"os"
)

var realmAdmin = "admin/ldap-local"

func GetTopLevel() topLevel {
	TraceEnter("GetTopLevel")
	orgId, name := GetCMOrgID()
	if orgId == "error" {
		log.Printf("Error unable to get OrgId")
		os.Exit(1)
	}
	azs := GetAZs()
	members := NoOfCMMembers(orgId)
	memberInvites := NoOfCMMemberInvites(orgId)
	mailserv := NoOfMailServers(orgId)
	oauthp := NoOauthProvider(orgId)
	userreg := NoUserReg(orgId)

	orgNo, orgList := getOrgs()

	options := make([]string, orgNo)

	orgsToInvestigate := struct {
		POrg      []string
		SameCreds string
	}{}

	orgMap := make(map[string]orgNameId)
	for i, v := range *orgList {
		options[i] = v.name
		orgMap[v.name] = v
	}

	prompt := []*survey.Question{
		{
			Name: "pOrg",
			Prompt: &survey.MultiSelect{
				Message: "Which Provider Orgs would you like to investigate? :",
				Options: options,
			}}, {
			Name: "sameCreds",
			Prompt: &survey.Select{
				Message: "Do you want to use the same credentials for all Provier Organizations? :",
				Options: []string{"yes", "no"},
			},
		},
	}
	//Are we in a test case or not?

	if orgs[0] != "" {
		orgsToInvestigate.SameCreds = "yes"
		orgsToInvestigate.POrg = orgs
	} else {
		survey.Ask(prompt, &orgsToInvestigate)
	}
	access_token := "unset"
	if orgsToInvestigate.SameCreds == "yes" {
		userDetails = userDetailsOrg
		access_token = login(PromptCredentials("All"))
	}
	org := make([]organization, len(orgsToInvestigate.POrg))
	chanList := make(map[string]chan bool, len(orgsToInvestigate.POrg))
	for i, v := range orgsToInvestigate.POrg {
		chanList[v] = make(chan bool)
		go asyncGetPorg(i, v, org, access_token, chanList, orgMap)
	}
	for _, v := range orgsToInvestigate.POrg {
		Log(v + " waiting.... ")
		<-chanList[v]
		Log(v + " complete.... ")
	}
	Trace(org)
	data := topLevel{
		name:            name,
		noOrg:           orgNo,
		org:             &org,
		noMembers:       members,
		noOauthP:        oauthp,
		noUserReg:       userreg,
		noMailServers:   mailserv,
		noMemberInvites: memberInvites,
		azs:             azs,
	}
	TraceExitReturn("GetTopLevel", data)
	return data
}
func GetAZs() *[]az {
	TraceEnter("GetAZs")

	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go
	path := "orgs/admin/availability-zones"
	jsonObj := APICRequest(path)

	if jsonObj == nil {
		return nil
	}
	// Trace(jsonObj)

	toReturn := make([]az, int(jsonObj["total_results"].(float64)))
	for i, v := range jsonObj["results"].([]interface{}) {
		azId := v.(map[string]interface{})["id"].(string)
		apigw, v5cgw := NoOfGW(azId)
		a7s := NoOfA7s(azId)
		portal := NoOfPortals(azId)
		toReturn[i] = az{v.(map[string]interface{})["name"].(string), portal, a7s, v5cgw, apigw}
	}

	TraceExitReturn("GetAZs", toReturn)
	return &toReturn
}

func NoOfGW(az string) (int, int) {
	TraceEnter("NoOfGW")
	path := "orgs/admin/availability-zones/" + az + "/gateway-services"
	jsonObj := APICRequest(path)
	if jsonObj == nil {
		return -1, -1
	}
	apiGW := 0
	v5cGW := 0
	for _, v := range jsonObj["results"].([]interface{}) {
		gwType := v.(map[string]interface{})["gateway_service_type"].(string)

		if gwType == "datapower-api-gateway" {
			apiGW++
		} else {
			v5cGW++
		}
	}
	TraceExitReturn("NoOfGW", fmt.Sprintf("APIGW %v\t V5CsGW %v", apiGW, v5cGW))
	return apiGW, v5cGW
}

func NoOfA7s(az string) int {
	TraceEnter("NoOfA7s")
	path := "orgs/admin/availability-zones/" + az + "/analytics-services"
	jsonObj := APICRequest(path)
	if jsonObj == nil {
		return -1
	}

	toReturn := int(jsonObj["total_results"].(float64))

	TraceExitReturn("NoOfA7s", fmt.Sprintf("A7s %v", toReturn))
	return toReturn
}
func NoOfPortals(az string) int {
	TraceEnter("NoOfPortals")
	path := "orgs/admin/availability-zones/" + az + "/portal-services"
	jsonObj := APICRequest(path)
	if jsonObj == nil {
		return -1
	}
	toReturn := int(jsonObj["total_results"].(float64))
	TraceExitReturn("NoOfPortals", fmt.Sprintf("Portal %v", toReturn))
	return toReturn
}

func NoOfCMMembers(orgId string) int {
	TraceEnter("NoOfCMMembers")
	toReturn := getData("orgs", orgId, "members")
	TraceExitReturn("NoOfCMMembers", fmt.Sprintf("Members %v", toReturn))
	return toReturn
}

func NoOfCMMemberInvites(orgId string) int {
	TraceEnter("NoOfCMMembers")
	toReturn := getData("orgs", orgId, "member-invitations")
	TraceExitReturn("NoOfCMMembers", fmt.Sprintf("Member-Invitations %v", toReturn))
	return toReturn
}
func GetCMOrgID() (string, string) {
	TraceEnter("GetCMOrgID")
	Trace("https://apim.lts.apicww.cloud/api/orgs")
	// https://apim.lts.apicww.cloud/api/orgs
	path := "orgs"
	jsonObj := APICRequest(path)

	if jsonObj == nil {
		return "error", "Unable to get name"
	}
	toReturnId := jsonObj["results"].([]interface{})[0].(map[string]interface{})["id"].(string)
	toReturnName := jsonObj["results"].([]interface{})[0].(map[string]interface{})["title"].(string)
	TraceExitReturn("GetCMOrgID", fmt.Sprintf("Org ID %v \t Org Name %v", toReturnId, toReturnName))
	return toReturnId, toReturnName
}
func NoUserReg(orgId string) int {
	TraceEnter("NoUserReg")
	toReturn := getData("orgs", orgId, "user-registries")
	TraceExitReturn("NoUserReg", fmt.Sprintf("UserRegistries %v", toReturn))
	return toReturn
}
func NoOauthProvider(orgId string) int {
	TraceEnter("NoOauthProvider")
	toReturn := getData("orgs", orgId, "oauth-providers")
	TraceExitReturn("NoOauthProvider", fmt.Sprintf("UserRegistries %v", toReturn))
	return toReturn
}
func NoOfMailServers(orgId string) int {
	TraceEnter("NoOfMailServers")
	toReturn := getData("orgs", orgId, "mail-servers")
	TraceExitReturn("NoOfMailServers", fmt.Sprintf("Mail Servers %v", toReturn))
	return toReturn
}

func getOrgs() (int, *[]orgNameId) {
	TraceEnter("getOrgs")

	path := "cloud/orgs"
	jsonObj := APICRequest(path)
	if jsonObj == nil {
		return -1, nil
	}
	toReturnNo := int(jsonObj["total_results"].(float64))
	toReturnList := make([]orgNameId, toReturnNo)
	for i, v := range jsonObj["results"].([]interface{}) {
		d := v.(map[string]interface{})
		toReturnList[i] = orgNameId{id: d["id"].(string), name: d["title"].(string)}
	}
	TraceExitReturn("getOrgs", fmt.Sprintf("keyword %v", fmt.Sprintf("NoOfOrg %v \t orgList %v", toReturnNo, toReturnList)))
	return toReturnNo, &toReturnList
}

type orgNameId struct {
	name string
	id   string
}

func loginCM(UC userCreds) string {
	TraceEnter("loginCM")
	toReturn := login(UC)
	TraceExit("loginCM")
	return toReturn
}

func asyncGetPorg(i int, localV string, org []organization, access_token string, chanList map[string]chan bool, orgMap map[string]orgNameId) {
	Log("Investigating Organization " + localV)
	org[i] = GetPOrg(orgMap[localV], access_token)
	Log("DONE " + localV)
	chanList[localV] <- true
}
